#!/usr/bin/env python3

#  Copyright 2010-2017 Mads Michelsen (mail@brokkr.net)
# This file is part of Poca.
# Poca is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.

"""A cron-friendly command line podcast aggregator"""


import sys
from queue import Queue
from time import sleep

import poca


def main():
    '''Main script'''
    try:

        # args to paths
        args = poca.args.get_poca_args()
        stream_logger = poca.loggers.start_stream_logger(args)
        streamfail_logger = poca.loggers.start_after_stream_logger(args)
        paths = poca.config.Paths(args)
        summary_logger = poca.loggers.start_summary_logger(args, paths)
        # poca
        poca_yaml = poca.config.read_yaml(paths.config_file)
        subs = poca_yaml.pop('subscriptions')
        defaults = poca_yaml.pop('defaults')
        # note string
        base_dir = poca.config.Path(poca_yaml['settings'].pop('base_dir'))
        dl_settings, id3_settings = poca.config.get_settings(poca_yaml)

        # state
        #state_yaml = config.read_yaml(paths.state_file)
        # start identifying log_file and get state.yaml -> blocklist etc.

        print('paths')
        print(paths.config_dir, paths.config_file, paths.db_dir, paths.log_file)
        print('subs')
        print(subs)
        print('defaults')
        print(defaults)
        print('base_dir')
        print(base_dir)
        print('dl_settings')
        print(dl_settings)
        print('id3_settings')
        print(id3_settings)

        #sys.exit()

        # update loop
        max_threads = args.threads if not args.verbose else 1
        update_threads = []
        update_q = Queue()
        skip_subs = []
        for sub in subs:
            update_thread = poca.subupdate.SubUpdateThread(
                update_q, poca.subupdate.SubUpdate, sub, defaults, base_dir)
            update_threads.append(update_thread)
            update_thread.start()

        # upgrade loop
        upgrade_threads = []
        while len(upgrade_threads) + len(skip_subs) < len(subs):
            while (len([t for t in upgrade_threads if t.is_alive()])
                   < max_threads and not update_q.empty()):
                subdata = update_q.get()
                if subdata.outcome.success is False:
                    poca.output.plans_error(subdata)
                    skip_subs.append(subdata)
                    update_q.task_done()
                    continue
                if subdata.status == 301:
                    _outcome = poca.subscribe.update_url(args, subdata)
                    poca.output.plans_moved(subdata, _outcome)
                if subdata.status == 304:
                    skip_subs.append(subdata)
                    update_q.task_done()
                    poca.output.plans_nochanges(subdata)
                    continue
                state = {}
                title = subdata.sub['title']
                state['etag'] = subdata.wanted.feed_etag
                state['modified'] = subdata.wanted.feed_modified
                state['current'] = subdata.lacking
                print(title, state)
                poca.output.plans_upgrade(subdata)
                upgrade_thread = poca.subupgrade.SubUpgradeThread(update_q,
                    poca.subupgrade.SubUpgrade, subdata, dl_settings,
                    id3_settings)
                upgrade_threads.append(upgrade_thread)
                upgrade_thread.start()
            sleep(0.5)
        for upgrade_thread in upgrade_threads:
            upgrade_thread.join()

        # wrap up
        poca.output.after_stream_flush()
        poca.output.email_summary()

    except KeyboardInterrupt:
        for thread in upgrade_threads:
            setattr(thread, "kill", True)
        sys.exit()


if __name__ == '__main__':
    main()
